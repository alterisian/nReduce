.video_wrapper
  #video
    .loading Loading Live Stream...

- if @owner
  %div{:style => 'margin-top: 10px;'}
    = link_to 'Start Recording', '#', :onclick => "initiateArchiveForRecording(); return false;", :class => 'btn btn-success start_recording'
    &nbsp;&nbsp;
    = link_to 'Stop Recording (press once when done demo day)', '#', :onclick => "stopRecordingSession(); return false;", :class => 'btn btn-danger stop_recording'

:plain
  <script type="text/javascript">
  // http://www.tokbox.com/opentok/api/documentation/gettingstarted
  var session;
  var apiKey = '#{Settings.apis.tokbox.key}';
  var sessionId = '#{@tokbox_session_id}';
  var token = '#{@tokbox_token}';

  // Show loading if stream gets killed
  function streamDestroyed(event) {
    $('.loading').show();
  }

- if @owner
  :plain
    var publisher;
    var archive;

    function sessionConnectedHandler(event) {
      // Put my webcam in a div
      var publishProps = {width:500, height:315};
      publisher = TB.initPublisher(apiKey, 'video', publishProps);
      // Send my stream to the session
      session.publish(publisher);

      // Show video
      $('.loading').remove();
    }

    function initiateArchiveForRecording(){
      if(archive == undefined || archive == null){
        var d = new Date();
        session.createArchive(#{Settings.apis.tokbox.key}, "perSession", '#{@startup.name} - ' + d.valueOf());
      }else{
        startRecordingSession();
        // session.closeArchive(archive);
        // session.addEventListener("archiveClosed", archiveClosedStartRecordingAgainHandler);
      }
    }

    function archiveClosedStartRecordingAgainHandler(){
      archive = null;
      initiateArchiveForRecording();
    }

    function startRecordingSession(){
      session.startRecording(archive);
    }

    function stopRecordingSession(){
      session.stopRecording(archive);
      session.closeArchive(archive);
    }

    function recordingInProgressHandler(event) {
      alert("There is a recording in progress already.");
    }

    function recordingStartedHandler(event) {
      alert("The session is being recorded.");
      $('.btn.start_recording').hide();
    }

    function recordingStoppedHandler(event) {
      alert("The session recording has stopped.");
      $('.btn.stop_recording').hide();
    }

    function archiveCreatedHandler(event) {
      //console.log('archive created');
      archive = event.archives[0];
      //console.log("Recording archive has been created");
      startRecordingSession();
    }

    function archiveClosedHandler(event){
      //console.log("The archive has been successfully closed");
    }

- else
  :plain
    function sessionConnectedHandler(event) {
      for (var i = 0; i < event.streams.length; i++) {
        var stream = event.streams[i];
        displayStream(stream);
      }
      streams = event.streams;
    }

    function displayStream(stream) {
      var div = document.createElement('div');
      div.setAttribute('id', 'stream' + stream.streamId);
      var streamsContainer = document.getElementById('video');
      streamsContainer.appendChild(div);
      var divProps = {width: 500, height:315};
      subscriber = session.subscribe(stream, 'stream' + stream.streamId, divProps);
      $('.loading').remove();
    }

- if user_signed_in? && current_user.admin?
  :plain
    TB.setLogLevel(TB.DEBUG);
:plain
  session = TB.initSession(sessionId);
  session.addEventListener('sessionConnected', sessionConnectedHandler);

-# Listen if stream gets created again - to display in case publisher loses connection
- if @owner
  :plain
    // Add event listeners
    session.addEventListener("archiveCreated", archiveCreatedHandler);
    session.addEventListener("archiveClosed", archiveClosedHandler);
    session.addEventListener("sessionRecordingStarted", recordingStartedHandler);
    session.addEventListener("sessionRecordingStopped", recordingStoppedHandler);
    session.addEventListener("sessionRecordingInProgress", recordingInProgressHandler);

:plain
  session.connect(apiKey, token);
  </script>